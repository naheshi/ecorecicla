// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  name                String
  password            String
  barcode             String               @unique @default(uuid())
  referralCode        String               @unique @default(cuid())
  totalPoints         Int                  @default(0)
  role                Role                 @relation(fields: [roleId], references: [id])
  roleId              Int
  picture             UserAvatar           @relation(fields: [pictureId], references: [id])
  pictureId           Int
  createdAt           DateTime             @default(now())
  passwordResetTokens PasswordResetToken[]
  transactions        Transaction[]
  rewardClaims        RewardClaim[]
  userban             UserBan?

  referredBy     User?  @relation("Referrals", fields: [referredById], references: [id])
  referredById   Int?
  referrals      User[] @relation("Referrals")
  referralPoints Int    @default(0)
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  createdAt DateTime @default(now())
}

model UserBan {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @unique
  reason   String?
  bannedAt DateTime  @default(now())
  until    DateTime?
}

model UserAvatar {
  id    Int    @id @default(autoincrement())
  url   String
  users User[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  descr     String
  units     Int      @db.SmallInt
  price     Int      @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Transaction {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  itemscanned ItemScanned[]
}

model ItemScanned {
  id            Int         @id @default(autoincrement())
  url           String
  createdAt     DateTime    @default(now())
  typeitem      TypeItem    @relation(fields: [typeitemID], references: [id])
  typeitemID    Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
}

model TypeItem {
  id          Int           @id @default(autoincrement())
  name        String
  points      Int           @default(1)
  createdAt   DateTime      @default(now())
  itemScanned ItemScanned[]
}

model Reward {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  image       String?
  costPoints  Int           @default(0)
  createdAt   DateTime      @default(now())
  redemptions RewardClaim[]
}

model RewardClaim {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  reward    Reward   @relation(fields: [rewardId], references: [id])
  rewardId  Int
  claimedAt DateTime @default(now())
  delivered Boolean  @default(false)
}
